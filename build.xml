<project name="phing-tools" default="info">
    <property name="base.prop" value="vendor/igritsay/phing-tools/build.properties" />
    <property name="default.prop" value="${application.startdir}/build/default/build.properties" />
    <property name="env.prop" value="${application.startdir}/build/${host.name}/build.properties" />

    <property name="base.prop.exists" value="false" />
    <property name="default.prop.exists" value="false" />
    <property name="env.prop.exists" value="false" />

    <available file="${base.prop}" property="base.prop.exists" type="file" />
    <available file="${default.prop}" property="default.prop.exists" type="file" />
    <available file="${env.prop}" property="env.prop.exists" type="file" />

    <if>
        <istrue value="${base.prop.exists}" />
        <then>
            <property file="${base.prop}" override="true" />
        </then>
    </if>

    <if>
        <istrue value="${default.prop.exists}" />
    	<then>
			<property file="${default.prop}" override="true" />
		</then>
	</if>

    <if>
        <istrue value="${env.prop.exists}" />
        <then>
            <property file="${env.prop}" override="true" />
        </then>
    </if>

    <target name="info">
        <echo>application.startdir = ${application.startdir}</echo>
        <echo>host.arch = ${host.arch}</echo>
        <echo>host.domain = ${host.domain}</echo>
        <echo>host.fstype = ${host.fstype}</echo>
        <echo>host.name = ${host.name}</echo>
        <echo>host.os = ${host.os}</echo>
        <echo>host.os.release = ${host.os.release}</echo>
        <echo>host.os.version = ${host.os.version}</echo>
        <echo>os.name = ${os.name}</echo>
        <echo>phing.file = ${phing.file}</echo>
        <echo>phing.home = ${phing.home}</echo>
        <echo>phing.version = ${phing.version}</echo>
        <echo>phing.project.name = ${phing.project.name}</echo>
        <echo>php.classpath = ${php.classpath}</echo>
        <echo>php.version = ${php.version}</echo>
        <echo>project.basedir = ${project.basedir}</echo>
        <echo>user.home = ${user.home}</echo>
    </target>

    <target name="db:export" description="Backup database">
        <mkdir dir="${db.dir}" />

        <if>
            <equals arg1="${db.pass}" arg2="" />
            <then>
                <property name="cmd"  value="mysqldump -u ${db.user} --skip-comments --result-file=${db.file} ${db.name}" override="true" />
            </then>
            <else>
                <property name="cmd"  value="mysqldump -u ${db.user} -p${db.pass} --skip-comments --result-file=${db.file} ${db.name}" override="true" />
            </else>
        </if>

        <echo>${cmd}</echo>
        <exec command="${cmd}" dir="${db.dir}" logoutput="true" checkreturn="true" />

        <reflexive file="${db.dir}/${db.file}">
            <filterchain>
                <filterreader classname="vendor.igritsay.phing-tools.classes.phing.filters.SafeReplaceURLS">
                    <param name="url.find" value="${url.local}" />
                    <param name="url.replace" value="${url.placeholder}" />
                </filterreader>
                <replaceregexp>
                    <regexp pattern="VALUES \(" replace="VALUES${line.separator}(" />
                    <regexp pattern="\),\(" replace="),${line.separator}(" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <target name="db:import" description="Restore database">
        <property name="db.file.exists" value="false" />
        <available property="db.file.exists" file="${db.dir}/${db.file}" type="file" />
        <if>
            <isfalse value="${db.file.exists}" />
            <then>
                <fail>"${db.dir}/${db.file}" file not exists</fail>
            </then>
            <else>
                <copy file="${db.dir}/${db.file}" tofile="${db.dir}/${db.file}.tmp" overwrite="true">
                    <filterchain>
                        <filterreader classname="vendor.igritsay.phing-tools.classes.phing.filters.SafeReplaceURLS">
                            <param name="url.find" value="${url.placeholder}" />
                            <param name="url.replace" value="${url.local}" />
                        </filterreader>
                    </filterchain>
                </copy>

                <if>
                    <equals arg1="${db.pass}" arg2="" />
                    <then>
                        <property name="cmd"  value="mysql -u ${db.user} -h ${db.host} ${db.name} &lt; ${db.dir}/${db.file}.tmp" override="true" />
                    </then>
                    <else>
                        <property name="cmd"  value="mysql -u ${db.user} -p${db.pass} -h ${db.host} ${db.name} &lt; ${db.dir}/${db.file}.tmp" override="true" />
                    </else>
                </if>

                <echo>${cmd}</echo>

                <trycatch>
                    <try>
                        <exec command="${cmd}" dir="${db.dir}" passthru="true" checkreturn="true" />
                    </try>
                    <finally>
                        <delete file="${db.dir}/${db.file}.tmp" failonerror="true" />
                    </finally>
                </trycatch>
            </else>
        </if>
    </target>

    <target name="db:prepare" description="Prepare database (replace urls by placeholders)">
        <reflexive file="${db.dir}/${db.file}">
            <filterchain>
                <filterreader classname="vendor.igritsay.phing-tools.classes.phing.filters.SafeReplaceURLS">
                    <param name="url.find" value="${url}" />
                    <param name="url.replace" value="${url.placeholder}" />
                </filterreader>
            </filterchain>
        </reflexive>
    </target>

    <target name="db:prepare:external" description="Prepare database for import into external db">
        <copy file="${db.dir}/${db.file}" tofile="${db.dir}/${db.file.external}" overwrite="true">
            <filterchain>
                <filterreader classname="vendor.igritsay.phing-tools.classes.phing.filters.SafeReplaceURLS">
                    <param name="url.find" value="${url.placeholder}" />
                    <param name="url.replace" value="${url.external}" />
                </filterreader>
            </filterchain>
        </copy>
    </target>
</project>